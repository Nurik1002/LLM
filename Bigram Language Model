{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3fc03496",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:33.562012Z",
     "iopub.status.busy": "2024-07-27T11:16:33.561715Z",
     "iopub.status.idle": "2024-07-27T11:16:37.459903Z",
     "shell.execute_reply": "2024-07-27T11:16:37.459144Z"
    },
    "papermill": {
     "duration": 3.908047,
     "end_time": "2024-07-27T11:16:37.462211",
     "exception": false,
     "start_time": "2024-07-27T11:16:33.554164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.nn import functional as F\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "881fc30a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:37.476966Z",
     "iopub.status.busy": "2024-07-27T11:16:37.476577Z",
     "iopub.status.idle": "2024-07-27T11:16:37.562457Z",
     "shell.execute_reply": "2024-07-27T11:16:37.561577Z"
    },
    "papermill": {
     "duration": 0.0952,
     "end_time": "2024-07-27T11:16:37.564411",
     "exception": false,
     "start_time": "2024-07-27T11:16:37.469211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'cuda'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
    "device"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7dc54f30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:37.577893Z",
     "iopub.status.busy": "2024-07-27T11:16:37.577610Z",
     "iopub.status.idle": "2024-07-27T11:16:37.581683Z",
     "shell.execute_reply": "2024-07-27T11:16:37.580838Z"
    },
    "papermill": {
     "duration": 0.012983,
     "end_time": "2024-07-27T11:16:37.583622",
     "exception": false,
     "start_time": "2024-07-27T11:16:37.570639",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "block_size = 20\n",
    "batch_size = 128\n",
    "learning_rate = 3e-4\n",
    "max_iter = 10000\n",
    "eval_iters = 250"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c27711da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:37.596749Z",
     "iopub.status.busy": "2024-07-27T11:16:37.596479Z",
     "iopub.status.idle": "2024-07-27T11:16:37.607258Z",
     "shell.execute_reply": "2024-07-27T11:16:37.606403Z"
    },
    "papermill": {
     "duration": 0.019443,
     "end_time": "2024-07-27T11:16:37.609194",
     "exception": false,
     "start_time": "2024-07-27T11:16:37.589751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "with open(\"/kaggle/input/wizard-of-oz-txt/wizard_of_oz.txt\", \"r\", encoding=\"utf-8\") as f:\n",
    "  text = f.read()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e8a931b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:37.622270Z",
     "iopub.status.busy": "2024-07-27T11:16:37.622027Z",
     "iopub.status.idle": "2024-07-27T11:16:37.629882Z",
     "shell.execute_reply": "2024-07-27T11:16:37.629123Z"
    },
    "papermill": {
     "duration": 0.016964,
     "end_time": "2024-07-27T11:16:37.632196",
     "exception": false,
     "start_time": "2024-07-27T11:16:37.615232",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['\\n', ' ', '!', '\"', '&', \"'\", '(', ')', '*', ',', '-', '.', '0', '1', '8', '9', ':', ';', '?', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', ']', '_', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n",
      "74\n"
     ]
    }
   ],
   "source": [
    "chars = sorted(set(text))\n",
    "print(chars)\n",
    "print(len(chars))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8a227ce8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:37.645240Z",
     "iopub.status.busy": "2024-07-27T11:16:37.644960Z",
     "iopub.status.idle": "2024-07-27T11:16:37.649059Z",
     "shell.execute_reply": "2024-07-27T11:16:37.648318Z"
    },
    "papermill": {
     "duration": 0.012542,
     "end_time": "2024-07-27T11:16:37.650796",
     "exception": false,
     "start_time": "2024-07-27T11:16:37.638254",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "string_to_int = {ch: i for i, ch in enumerate(chars)}\n",
    "int_to_string = {i: ch for i, ch in enumerate(chars)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "47937947",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:37.664105Z",
     "iopub.status.busy": "2024-07-27T11:16:37.663838Z",
     "iopub.status.idle": "2024-07-27T11:16:37.668076Z",
     "shell.execute_reply": "2024-07-27T11:16:37.667263Z"
    },
    "papermill": {
     "duration": 0.012832,
     "end_time": "2024-07-27T11:16:37.669904",
     "exception": false,
     "start_time": "2024-07-27T11:16:37.657072",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "encode = lambda s: [string_to_int[ch] for ch in s]\n",
    "decode = lambda l: \"\".join([int_to_string[i] for i in l])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "51986618",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:37.683015Z",
     "iopub.status.busy": "2024-07-27T11:16:37.682765Z",
     "iopub.status.idle": "2024-07-27T11:16:37.687896Z",
     "shell.execute_reply": "2024-07-27T11:16:37.687054Z"
    },
    "papermill": {
     "duration": 0.013848,
     "end_time": "2024-07-27T11:16:37.689786",
     "exception": false,
     "start_time": "2024-07-27T11:16:37.675938",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[55, 52, 59, 59, 62]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "encode(\"hello\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c782aba0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:37.703256Z",
     "iopub.status.busy": "2024-07-27T11:16:37.702948Z",
     "iopub.status.idle": "2024-07-27T11:16:37.708242Z",
     "shell.execute_reply": "2024-07-27T11:16:37.707397Z"
    },
    "papermill": {
     "duration": 0.014065,
     "end_time": "2024-07-27T11:16:37.710038",
     "exception": false,
     "start_time": "2024-07-27T11:16:37.695973",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'hello'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decode([55, 52, 59, 59, 62])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c167df64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:37.727249Z",
     "iopub.status.busy": "2024-07-27T11:16:37.726550Z",
     "iopub.status.idle": "2024-07-27T11:16:37.799413Z",
     "shell.execute_reply": "2024-07-27T11:16:37.798714Z"
    },
    "papermill": {
     "duration": 0.083833,
     "end_time": "2024-07-27T11:16:37.801310",
     "exception": false,
     "start_time": "2024-07-27T11:16:37.717477",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = torch.tensor(encode(text), dtype=torch.long)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "534cbd4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:37.815902Z",
     "iopub.status.busy": "2024-07-27T11:16:37.815660Z",
     "iopub.status.idle": "2024-07-27T11:16:37.847261Z",
     "shell.execute_reply": "2024-07-27T11:16:37.846357Z"
    },
    "papermill": {
     "duration": 0.041334,
     "end_time": "2024-07-27T11:16:37.849177",
     "exception": false,
     "start_time": "2024-07-27T11:16:37.807843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([67, 55, 72,  1, 72, 62, 68, 61, 54, 66, 67, 52, 65,  1, 55, 48, 66,  1,\n",
      "        48,  1, 70, 55, 62, 59, 52, 66, 62, 60, 52,  1, 48, 61, 51,  0, 56, 61,\n",
      "        66, 67, 56, 61, 50, 67, 56, 69, 52,  1, 59, 62, 69, 52,  1, 53, 62, 65,\n",
      "         1, 66, 67, 62, 65, 56, 52, 66,  1, 53, 48, 61, 67, 48, 66, 67, 56, 50,\n",
      "         9,  1, 60, 48, 65, 69, 52, 59, 62, 68, 66,  1, 48, 61, 51,  1, 60, 48,\n",
      "        61, 56, 53, 52, 66, 67, 59, 72,  0, 68])\n"
     ]
    }
   ],
   "source": [
    "print(data[500:600])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3ee590c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:37.866227Z",
     "iopub.status.busy": "2024-07-27T11:16:37.865380Z",
     "iopub.status.idle": "2024-07-27T11:16:37.871282Z",
     "shell.execute_reply": "2024-07-27T11:16:37.870316Z"
    },
    "papermill": {
     "duration": 0.017945,
     "end_time": "2024-07-27T11:16:37.874916",
     "exception": false,
     "start_time": "2024-07-27T11:16:37.856971",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "n = int(0.8*len(data))\n",
    "train_data = data[:n]\n",
    "val_data = data[n:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "df5b9751",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:37.894702Z",
     "iopub.status.busy": "2024-07-27T11:16:37.894434Z",
     "iopub.status.idle": "2024-07-27T11:16:37.901066Z",
     "shell.execute_reply": "2024-07-27T11:16:37.899556Z"
    },
    "papermill": {
     "duration": 0.019527,
     "end_time": "2024-07-27T11:16:37.903940",
     "exception": false,
     "start_time": "2024-07-27T11:16:37.884413",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_batch(split):\n",
    "  data = train_data if split == \"train\" else val_data\n",
    "  idx  = torch.randint(len(data) - block_size, (batch_size,))\n",
    "  x = torch.stack([data[i:i+block_size] for i in idx])\n",
    "  y = torch.stack([data[i+1:i+block_size+1] for i in idx])\n",
    "  x, y = x.to(device), y.to(device)\n",
    "  return x, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b646f033",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:37.926669Z",
     "iopub.status.busy": "2024-07-27T11:16:37.924690Z",
     "iopub.status.idle": "2024-07-27T11:16:38.140550Z",
     "shell.execute_reply": "2024-07-27T11:16:38.139749Z"
    },
    "papermill": {
     "duration": 0.228981,
     "end_time": "2024-07-27T11:16:38.142791",
     "exception": false,
     "start_time": "2024-07-27T11:16:37.913810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x, y = get_batch(\"train\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ffe0f1d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:38.159176Z",
     "iopub.status.busy": "2024-07-27T11:16:38.158817Z",
     "iopub.status.idle": "2024-07-27T11:16:38.193815Z",
     "shell.execute_reply": "2024-07-27T11:16:38.192376Z"
    },
    "papermill": {
     "duration": 0.046267,
     "end_time": "2024-07-27T11:16:38.195787",
     "exception": false,
     "start_time": "2024-07-27T11:16:38.149520",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "inputs : \n",
      "tensor([[68, 66, 52,  ..., 51,  1, 48],\n",
      "        [48, 66,  1,  ..., 66,  0, 55],\n",
      "        [51, 56, 51,  ..., 67, 55, 52],\n",
      "        ...,\n",
      "        [48,  1, 55,  ..., 59, 62, 69],\n",
      "        [62,  1, 55,  ..., 52,  1, 70],\n",
      "        [66, 52, 51,  ..., 67, 55, 52]], device='cuda:0')\n",
      "targets : \n",
      "tensor([[66, 52, 51,  ...,  1, 48, 60],\n",
      "        [66,  1, 63,  ...,  0, 55, 52],\n",
      "        [56, 51,  1,  ..., 55, 52,  1],\n",
      "        ...,\n",
      "        [ 1, 55, 52,  ..., 62, 69, 52],\n",
      "        [ 1, 55, 52,  ...,  1, 70, 52],\n",
      "        [52, 51,  1,  ..., 55, 52,  1]], device='cuda:0')\n"
     ]
    }
   ],
   "source": [
    "print(\"inputs : \")\n",
    "print(x)\n",
    "print(\"targets : \")\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4b3bb826",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:38.210911Z",
     "iopub.status.busy": "2024-07-27T11:16:38.210491Z",
     "iopub.status.idle": "2024-07-27T11:16:38.217322Z",
     "shell.execute_reply": "2024-07-27T11:16:38.216469Z"
    },
    "papermill": {
     "duration": 0.01669,
     "end_time": "2024-07-27T11:16:38.219211",
     "exception": false,
     "start_time": "2024-07-27T11:16:38.202521",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "@torch.no_grad()\n",
    "def estimate_loss():\n",
    "  out = {}\n",
    "  model.eval()\n",
    "  for split in [\"train\", \"val\"]:\n",
    "    losses = torch.zeros(eval_iters)\n",
    "    for k in range(eval_iters):\n",
    "      X, Y = get_batch(split)\n",
    "      logits, loss = model(X, Y)\n",
    "      losses[k] = loss.item()\n",
    "    out[split] = losses.mean()\n",
    "  model.train()\n",
    "  return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ac365183",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:38.233729Z",
     "iopub.status.busy": "2024-07-27T11:16:38.233050Z",
     "iopub.status.idle": "2024-07-27T11:16:38.243406Z",
     "shell.execute_reply": "2024-07-27T11:16:38.242502Z"
    },
    "papermill": {
     "duration": 0.019574,
     "end_time": "2024-07-27T11:16:38.245278",
     "exception": false,
     "start_time": "2024-07-27T11:16:38.225704",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class BigramLanguageModel(nn.Module):\n",
    "  def __init__(self, vocab_size):\n",
    "    super().__init__()\n",
    "    self.token_embedding_table = nn.Embedding(vocab_size, vocab_size)\n",
    "\n",
    "  def forward(self, index, targets=None):\n",
    "    logits = self.token_embedding_table(index)\n",
    "    if targets is None:\n",
    "      loss = None\n",
    "    else:\n",
    "      B, T, C = logits.shape\n",
    "      logits = logits.view(B*T, C)\n",
    "      targets = targets.view(B*T)\n",
    "      loss = F.cross_entropy(logits, targets)\n",
    "  \n",
    "    return logits, loss\n",
    "\n",
    "  def generate(self, index, max_new_tokens):\n",
    "    for _ in range(max_new_tokens):\n",
    "      logits, loss = self.forward(index)\n",
    "      logits = logits[:, -1, :]\n",
    "      probs = F.softmax(logits, dim=-1)\n",
    "      index_next = torch.multinomial(probs, num_samples=1)\n",
    "      index = torch.cat((index, index_next), dim=1)\n",
    "    return index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "db1ebdd1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:38.260120Z",
     "iopub.status.busy": "2024-07-27T11:16:38.259528Z",
     "iopub.status.idle": "2024-07-27T11:16:38.267730Z",
     "shell.execute_reply": "2024-07-27T11:16:38.267094Z"
    },
    "papermill": {
     "duration": 0.017665,
     "end_time": "2024-07-27T11:16:38.269523",
     "exception": false,
     "start_time": "2024-07-27T11:16:38.251858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = BigramLanguageModel(vocab_size=len(chars))\n",
    "model = model.to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3f183b38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:38.284028Z",
     "iopub.status.busy": "2024-07-27T11:16:38.283754Z",
     "iopub.status.idle": "2024-07-27T11:16:38.791866Z",
     "shell.execute_reply": "2024-07-27T11:16:38.790437Z"
    },
    "papermill": {
     "duration": 0.51795,
     "end_time": "2024-07-27T11:16:38.794057",
     "exception": false,
     "start_time": "2024-07-27T11:16:38.276107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Fc0wNt&]DEV![n-]hU'sAye\n",
      "JjS8nM,,IzGR0K0-SH\n",
      "O,nE &K1yUF0fYp(KOzuha);GyLwhW*)v![x(]FmVgAzvdcO_fbs.9(pDP'aSl?Me**CY,uj\"xGVqiSMYn0_\n",
      "K!xFPkdv'-uh!9_]qcv&PDM,FkUy Ub[Odso?8zY\"p,ngjFAfjlOhBqipMHtCdWzSaK!FpX b9!H)(ZfzLERLw*sVD'[,? D!')\"xGu!ZBZjss9s8KU0fuNJ1soQwm,)ENWvmb[uvDyKX\" UHi!\"CMHKAztaP)Q*.VFeTt_cO9xdj]yX -jF*&]EYmso?1tkDccK9cMw)FnJEHipzZzKf,Yt\n",
      ":O;zJk-Bu-.9[vY-]1yt8REjlW&nW\n",
      "eQle*G0C RQ,sHu&F\n",
      "ED;(PJPlYENh(\"kvYkTUS'NkLIEL,RLs_fi0eBnwu[ebNLoS8ph,rmQW\"XGLwD,zGK:D 0![.u\"aS9]pVFr N'9Gu&k).oS'l9MRzKNOn8y\n"
     ]
    }
   ],
   "source": [
    "context = torch.zeros((batch_size, block_size), dtype=torch.long, device=device)\n",
    "generated_chars = decode(model.generate(context, max_new_tokens=500)[0].tolist())\n",
    "print(generated_chars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c9b0527d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:38.809310Z",
     "iopub.status.busy": "2024-07-27T11:16:38.808986Z",
     "iopub.status.idle": "2024-07-27T11:18:44.103420Z",
     "shell.execute_reply": "2024-07-27T11:18:44.102473Z"
    },
    "papermill": {
     "duration": 125.313958,
     "end_time": "2024-07-27T11:18:44.114888",
     "exception": false,
     "start_time": "2024-07-27T11:16:38.800930",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "step : 250, train loss : 4.6880, val loss : 4.6937\n",
      "step : 500, train loss : 4.5816, val loss : 4.5867\n",
      "step : 750, train loss : 4.4806, val loss : 4.4828\n",
      "step : 1000, train loss : 4.3782, val loss : 4.3822\n",
      "step : 1250, train loss : 4.2797, val loss : 4.2836\n",
      "step : 1500, train loss : 4.1878, val loss : 4.1901\n",
      "step : 1750, train loss : 4.0950, val loss : 4.1013\n",
      "step : 2000, train loss : 4.0074, val loss : 4.0120\n",
      "step : 2250, train loss : 3.9224, val loss : 3.9305\n",
      "step : 2500, train loss : 3.8401, val loss : 3.8478\n",
      "step : 2750, train loss : 3.7639, val loss : 3.7678\n",
      "step : 3000, train loss : 3.6890, val loss : 3.6945\n",
      "step : 3250, train loss : 3.6177, val loss : 3.6209\n",
      "step : 3500, train loss : 3.5452, val loss : 3.5519\n",
      "step : 3750, train loss : 3.4808, val loss : 3.4846\n",
      "step : 4000, train loss : 3.4162, val loss : 3.4247\n",
      "step : 4250, train loss : 3.3577, val loss : 3.3639\n",
      "step : 4500, train loss : 3.2986, val loss : 3.3040\n",
      "step : 4750, train loss : 3.2426, val loss : 3.2483\n",
      "step : 5000, train loss : 3.1901, val loss : 3.1986\n",
      "step : 5250, train loss : 3.1410, val loss : 3.1465\n",
      "step : 5500, train loss : 3.0891, val loss : 3.0983\n",
      "step : 5750, train loss : 3.0468, val loss : 3.0532\n",
      "step : 6000, train loss : 3.0031, val loss : 3.0097\n",
      "step : 6250, train loss : 2.9626, val loss : 2.9699\n",
      "step : 6500, train loss : 2.9247, val loss : 2.9298\n",
      "step : 6750, train loss : 2.8889, val loss : 2.8943\n",
      "step : 7000, train loss : 2.8527, val loss : 2.8593\n",
      "step : 7250, train loss : 2.8197, val loss : 2.8281\n",
      "step : 7500, train loss : 2.7901, val loss : 2.7970\n",
      "step : 7750, train loss : 2.7603, val loss : 2.7653\n",
      "step : 8000, train loss : 2.7320, val loss : 2.7401\n",
      "step : 8250, train loss : 2.7053, val loss : 2.7150\n",
      "step : 8500, train loss : 2.6830, val loss : 2.6880\n",
      "step : 8750, train loss : 2.6555, val loss : 2.6662\n",
      "step : 9000, train loss : 2.6363, val loss : 2.6423\n",
      "step : 9250, train loss : 2.6138, val loss : 2.6236\n",
      "step : 9500, train loss : 2.5937, val loss : 2.6078\n",
      "step : 9750, train loss : 2.5812, val loss : 2.5890\n",
      "step : 10000, train loss : 2.5636, val loss : 2.5738\n",
      "2.5942234992980957\n"
     ]
    }
   ],
   "source": [
    "optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)\n",
    "\n",
    "for _ in range(1,max_iter+1):\n",
    "  if _ % eval_iters == 0:\n",
    "    losses = estimate_loss()\n",
    "    print(f\"step : {_}, train loss : {losses['train']:.4f}, val loss : {losses['val']:.4f}\")\n",
    "  xb, yb = get_batch(\"train\")\n",
    "  logits, loss = model(xb, yb)\n",
    "  optimizer.zero_grad(set_to_none=True)\n",
    "  loss.backward()\n",
    "  optimizer.step()\n",
    "\n",
    "print(loss.item())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c32bc3f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:18:44.135321Z",
     "iopub.status.busy": "2024-07-27T11:18:44.134901Z",
     "iopub.status.idle": "2024-07-27T11:18:44.332740Z",
     "shell.execute_reply": "2024-07-27T11:18:44.331681Z"
    },
    "papermill": {
     "duration": 0.210152,
     "end_time": "2024-07-27T11:18:44.334591",
     "exception": false,
     "start_time": "2024-07-27T11:18:44.124439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "sk\n",
      "dnOVFous hJnowiThe,Lalitin an?-TSckeHuatxDu o slireelAAfouK,  asPXy soundcofuntadCf\n",
      "he sayaim veiouZThasheai; j!\"WXleWoDo[nde\n",
      " trtofERDUgenithed a ns, blull e\n",
      "[un'sA*\"A hy -Ab isX. therry o[BOinethadPoalusousthey;_ETe hentvkpr.\n",
      "g\n",
      "\"Zxe  pTOzR0g ckemioBan thtriI'thy amath iod\n",
      "sky ser ooun ?\"Abork'sadedeYerry QDoathoPNke\n",
      "Oz, heaGWis tothisea y0t t:[Ifo\n",
      "su r)Thisketuns, l0giom1yeedv1er\n",
      "asend ty hkenl0! chalprNe Gary I!\"\n",
      "GobX\"y\n",
      "\"gheea  f rDFoker.\n",
      "banzve?\" sie Fl f woritENm ?\"wonDounerantev1xpawe0\n"
     ]
    }
   ],
   "source": [
    "context = torch.zeros((batch_size, block_size), dtype=torch.long, device=device)\n",
    "generated_chars = decode(model.generate(context, max_new_tokens=500)[0].tolist())\n",
    "print(generated_chars)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 5423747,
     "sourceId": 9003231,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30747,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 134.880063,
   "end_time": "2024-07-27T11:18:45.565427",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-27T11:16:30.685364",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
