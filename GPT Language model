{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e11f3da9",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:01.042897Z",
     "iopub.status.busy": "2024-07-27T11:16:01.042475Z",
     "iopub.status.idle": "2024-07-27T11:16:05.453686Z",
     "shell.execute_reply": "2024-07-27T11:16:05.452025Z"
    },
    "papermill": {
     "duration": 4.421568,
     "end_time": "2024-07-27T11:16:05.457165",
     "exception": false,
     "start_time": "2024-07-27T11:16:01.035597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.nn import functional as F\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5a470dea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:05.471141Z",
     "iopub.status.busy": "2024-07-27T11:16:05.470586Z",
     "iopub.status.idle": "2024-07-27T11:16:05.480235Z",
     "shell.execute_reply": "2024-07-27T11:16:05.478728Z"
    },
    "papermill": {
     "duration": 0.019675,
     "end_time": "2024-07-27T11:16:05.483904",
     "exception": false,
     "start_time": "2024-07-27T11:16:05.464229",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'cpu'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
    "device"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ae43ed54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:05.496001Z",
     "iopub.status.busy": "2024-07-27T11:16:05.495590Z",
     "iopub.status.idle": "2024-07-27T11:16:05.501866Z",
     "shell.execute_reply": "2024-07-27T11:16:05.500422Z"
    },
    "papermill": {
     "duration": 0.015496,
     "end_time": "2024-07-27T11:16:05.504586",
     "exception": false,
     "start_time": "2024-07-27T11:16:05.489090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "block_size = 20\n",
    "batch_size = 128\n",
    "learning_rate = 3e-4\n",
    "max_iter = 10000\n",
    "eval_iters = 250"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "857bd8d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:05.517445Z",
     "iopub.status.busy": "2024-07-27T11:16:05.516995Z",
     "iopub.status.idle": "2024-07-27T11:16:05.532147Z",
     "shell.execute_reply": "2024-07-27T11:16:05.530176Z"
    },
    "papermill": {
     "duration": 0.025153,
     "end_time": "2024-07-27T11:16:05.535290",
     "exception": false,
     "start_time": "2024-07-27T11:16:05.510137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "with open(\"/kaggle/input/wizard-of-oz-txt/wizard_of_oz.txt\", \"r\", encoding=\"utf-8\") as f:\n",
    "  text = f.read()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fa9605b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:05.547568Z",
     "iopub.status.busy": "2024-07-27T11:16:05.547153Z",
     "iopub.status.idle": "2024-07-27T11:16:05.559090Z",
     "shell.execute_reply": "2024-07-27T11:16:05.557774Z"
    },
    "papermill": {
     "duration": 0.024392,
     "end_time": "2024-07-27T11:16:05.564860",
     "exception": false,
     "start_time": "2024-07-27T11:16:05.540468",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['\\n', ' ', '!', '\"', '&', \"'\", '(', ')', '*', ',', '-', '.', '0', '1', '8', '9', ':', ';', '?', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', ']', '_', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n",
      "74\n"
     ]
    }
   ],
   "source": [
    "chars = sorted(set(text))\n",
    "print(chars)\n",
    "print(len(chars))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "71b66d76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:05.578011Z",
     "iopub.status.busy": "2024-07-27T11:16:05.577622Z",
     "iopub.status.idle": "2024-07-27T11:16:05.584200Z",
     "shell.execute_reply": "2024-07-27T11:16:05.582681Z"
    },
    "papermill": {
     "duration": 0.016732,
     "end_time": "2024-07-27T11:16:05.586973",
     "exception": false,
     "start_time": "2024-07-27T11:16:05.570241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "string_to_int = {ch: i for i, ch in enumerate(chars)}\n",
    "int_to_string = {i: ch for i, ch in enumerate(chars)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c0c93dcb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:05.599929Z",
     "iopub.status.busy": "2024-07-27T11:16:05.599521Z",
     "iopub.status.idle": "2024-07-27T11:16:05.605760Z",
     "shell.execute_reply": "2024-07-27T11:16:05.604336Z"
    },
    "papermill": {
     "duration": 0.015728,
     "end_time": "2024-07-27T11:16:05.608382",
     "exception": false,
     "start_time": "2024-07-27T11:16:05.592654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "encode = lambda s: [string_to_int[ch] for ch in s]\n",
    "decode = lambda l: \"\".join([int_to_string[i] for i in l])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1cda6b8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:05.621693Z",
     "iopub.status.busy": "2024-07-27T11:16:05.621151Z",
     "iopub.status.idle": "2024-07-27T11:16:05.711207Z",
     "shell.execute_reply": "2024-07-27T11:16:05.709540Z"
    },
    "papermill": {
     "duration": 0.101497,
     "end_time": "2024-07-27T11:16:05.715508",
     "exception": false,
     "start_time": "2024-07-27T11:16:05.614011",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = torch.tensor(encode(text), dtype=torch.long)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b16a7cc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:05.729793Z",
     "iopub.status.busy": "2024-07-27T11:16:05.729409Z",
     "iopub.status.idle": "2024-07-27T11:16:05.755556Z",
     "shell.execute_reply": "2024-07-27T11:16:05.754365Z"
    },
    "papermill": {
     "duration": 0.037369,
     "end_time": "2024-07-27T11:16:05.758617",
     "exception": false,
     "start_time": "2024-07-27T11:16:05.721248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "n = int(0.8*len(data))\n",
    "train_data = data[:n]\n",
    "val_data = data[n:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8575f2b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:05.771712Z",
     "iopub.status.busy": "2024-07-27T11:16:05.771261Z",
     "iopub.status.idle": "2024-07-27T11:16:05.779697Z",
     "shell.execute_reply": "2024-07-27T11:16:05.778535Z"
    },
    "papermill": {
     "duration": 0.018417,
     "end_time": "2024-07-27T11:16:05.782564",
     "exception": false,
     "start_time": "2024-07-27T11:16:05.764147",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_batch(split):\n",
    "  data = train_data if split == \"train\" else val_data\n",
    "  idx  = torch.randint(len(data) - block_size, (batch_size,))\n",
    "  x = torch.stack([data[i:i+block_size] for i in idx])\n",
    "  y = torch.stack([data[i+1:i+block_size+1] for i in idx])\n",
    "  x, y = x.to(device), y.to(device)\n",
    "  return x, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "696078bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:05.796354Z",
     "iopub.status.busy": "2024-07-27T11:16:05.795317Z",
     "iopub.status.idle": "2024-07-27T11:16:05.853203Z",
     "shell.execute_reply": "2024-07-27T11:16:05.851941Z"
    },
    "papermill": {
     "duration": 0.068166,
     "end_time": "2024-07-27T11:16:05.856370",
     "exception": false,
     "start_time": "2024-07-27T11:16:05.788204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x, y = get_batch(\"train\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "eec6270d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:05.870150Z",
     "iopub.status.busy": "2024-07-27T11:16:05.869692Z",
     "iopub.status.idle": "2024-07-27T11:16:05.879465Z",
     "shell.execute_reply": "2024-07-27T11:16:05.877809Z"
    },
    "papermill": {
     "duration": 0.019794,
     "end_time": "2024-07-27T11:16:05.882332",
     "exception": false,
     "start_time": "2024-07-27T11:16:05.862538",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "@torch.no_grad()\n",
    "def estimate_loss():\n",
    "  out = {}\n",
    "  model.eval()\n",
    "  for split in [\"train\", \"val\"]:\n",
    "    losses = torch.zeros(eval_iters)\n",
    "    for k in range(eval_iters):\n",
    "      X, Y = get_batch(split)\n",
    "      logits, loss = model(X, Y)\n",
    "      losses[k] = loss.item()\n",
    "    out[split] = losses.mean()\n",
    "  model.train()\n",
    "  return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5c3c299c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:05.896314Z",
     "iopub.status.busy": "2024-07-27T11:16:05.895892Z",
     "iopub.status.idle": "2024-07-27T11:16:05.906862Z",
     "shell.execute_reply": "2024-07-27T11:16:05.905620Z"
    },
    "papermill": {
     "duration": 0.021341,
     "end_time": "2024-07-27T11:16:05.909484",
     "exception": false,
     "start_time": "2024-07-27T11:16:05.888143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class BigramLanguageModel(nn.Module):\n",
    "  def __init__(self, vocab_size):\n",
    "    super().__init__()\n",
    "    self.token_embedding_table = nn.Embedding(vocab_size, vocab_size)\n",
    "\n",
    "  def forward(self, index, targets=None):\n",
    "    logits = self.token_embedding_table(index)\n",
    "    if targets is None:\n",
    "      loss = None\n",
    "    else:\n",
    "      B, T, C = logits.shape\n",
    "      logits = logits.view(B*T, C)\n",
    "      targets = targets.view(B*T)\n",
    "      loss = F.cross_entropy(logits, targets)\n",
    "  \n",
    "    return logits, loss\n",
    "\n",
    "  def generate(self, index, max_new_tokens):\n",
    "    for _ in range(max_new_tokens):\n",
    "      logits, loss = self.forward(index)\n",
    "      logits = logits[:, -1, :]\n",
    "      probs = F.softmax(logits, dim=-1)\n",
    "      index_next = torch.multinomial(probs, num_samples=1)\n",
    "      index = torch.cat((index, index_next), dim=1)\n",
    "    return index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "540ccf97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T11:16:05.923316Z",
     "iopub.status.busy": "2024-07-27T11:16:05.922886Z",
     "iopub.status.idle": "2024-07-27T11:16:05.933939Z",
     "shell.execute_reply": "2024-07-27T11:16:05.932473Z"
    },
    "papermill": {
     "duration": 0.022514,
     "end_time": "2024-07-27T11:16:05.937917",
     "exception": false,
     "start_time": "2024-07-27T11:16:05.915403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = BigramLanguageModel(vocab_size=len(chars))\n",
    "model = model.to(device)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5423747,
     "sourceId": 9003231,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.238668,
   "end_time": "2024-07-27T11:16:06.868690",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-27T11:15:57.630022",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
